AWS:

VPC:
Let’s see how VPC works:
	1.	The user sends requests from the browser and it will goes to the VPC.
	2.	In the VPC, that request is received by the internet gateway and internet gateway to public subnet which is single public subnet in the VPC.
	3.	From the public subnet to elastic load balancer it will pass.
	4.	In elastic load balancer has the target group through that it will transfer the request with the help of route table , it will reach to the subnet where the application is deployed.
	5.	To enter into the application in ec2 , security group should allow that request. And then only request will be processed.

In simple, this from internet to vpc
User sends request -> internet gateway -> public subnet -> elastic load balancer -> route table -> security groups -> ec2 instance in subnet.

If you want to access anything from the internet then the private subnet should not allow it’s ip to the internet. For that, it follows the masking of ip through router or elastic load balancer. If that masking is done using elastic load balancer then it is called as SNAT gateway. If that masking is done using router then it is called as NAT gateway.

SECURITY GROUPS AND NACL:

Security groups:
Security groups are applied at instance level to only allow the traffic to the instance like ec2 instance.

NACL: NACL stands for Network Access Control List
Which is used at the subnet level and is used to allow and deny what kinds of traffic that is incoming.

Difference between Security groups and NACL:
   1. security groups applied at instance level.
	2.	NACL is applied at subnet level
	3.	Security groups are  used to allow traffic only.
	4.	NACL is used to allow and deny the traffic.

Consider this scenario, for ec2 instance security groups are used to allow what kind of traffic should access the instance. Where as NACL, the ec2 instance that is placed inside the subnet. The NACL should allow or deny the traffic and it allows to act as extra layer of security to it.

Let’s see there are 50 ec2 instance are placed inside the subnet and you want to control the traffic instead of creating the security groups for every ec2 instance, you can create the NACL and it will applied to subnet that means it will apply automatically for all the instance that are present inside it. We can save a lot of time.

Route53:
Route53 is DNS solution . DNS stands for Domain Name System.
DNS is used to map the ip address to the Name.
Like flipkart.com, amazon.com etc.
Instead of using the ip address, we are using the names to access the application because we cannot remember the ip address but we can easily remember the names.

They are two ways to configure the DNS:
	1.	In Route53, you can purchase the domain and create the hosted zones. In Hosted zones we will create the records that will map the ip address to names.
	2.	You can purchase the domain from outside like godaddy.com and you can create the hosted zones in the Route53.

NOTE:
Bastion host is used to access the resources that are present in the private subnet i.e ec2

If you want to create the auto scaling groups then first you need to create the template for it in that you need to mention the details like ami, instance type, in network create the security group and then allow the port whatever you want and in VPC, select the VPC we have created and then launch it.

Let’s see how we can create the Boston host:
	1.	Just create the ec2 instance and in that place this in VPC that we have created and allow ssh to this and also enable public ip to it.
	2.	We need to ssh to it and from this to, we need to ssh to the ec2 that is present in the private subnet and also we need to export the key pair to the Boston host because to ssh to it we need key pair.
	3.	how to copy file to remote server from local
	4.	scp -i path of Boston key pair path of private ec2 instance key pair username@public ip:path where you want to paste the keys.
	5.	Login into Bostion host and check whether the keys are present or not.
	6.	ssh to the private ec2 instance using private ip. You can successfully login into that.

In simply, if you want to create the autoscaling group then you need to create the launch template.
If you want to create the load balancer then you need to create the target groups.

# Scenario Based Interview Questions on EC2, IAM and VPC


Q: You have been assigned to design a VPC architecture for a 2-tier application. The application needs to be highly available and scalable. 
   How would you design the VPC architecture?

A: In this scenario, I would design a VPC architecture in the following way.
   I would create 2 subnets: public and private. The public subnet would contain the load balancers and be accessible from the internet. The private subnet would host the application servers. 
   I would distribute the subnets across multiple Availability Zones for high availability. Additionally, I would configure auto scaling groups for the application servers.

Q: Your organization has a VPC with multiple subnets. You want to restrict outbound internet access for resources in one subnet, but allow outbound internet access for resources in another subnet. How would you achieve this?

A: To restrict outbound internet access for resources in one subnet, we can modify the route table associated with that subnet. In the route table, we can remove the default route (0.0.0.0/0) that points to an internet gateway. 
   This would prevent resources in that subnet from accessing the internet. For the subnet where outbound internet access is required, we can keep the default route pointing to the internet gateway.

Q: You have a VPC with a public subnet and a private subnet. Instances in the private subnet need to access the internet for software updates. How would you allow internet access for instances in the private subnet?

A: To allow internet access for instances in the private subnet, we can use a NAT Gateway or a NAT instance. 
   We would place the NAT Gateway/instance in the public subnet and configure the private subnet route table to send outbound traffic to the NAT Gateway/instance. This way, instances in the private subnet can access the internet through the NAT Gateway/instance.

Q: You have launched EC2 instances in your VPC, and you want them to communicate with each other using private IP addresses. What steps would you take to enable this communication?

A: By default, instances within the same VPC can communicate with each other using private IP addresses. 
  To ensure this communication, we need to make sure that the instances are launched in the same VPC and are placed in the same subnet or subnets that are connected through a peering connection or a VPC peering link. 
  Additionally, we should check the security groups associated with the instances to ensure that the necessary inbound and outbound rules are configured to allow communication between them.

Q: You want to implement strict network access control for your VPC resources. How would you achieve this?

A: To implement granular network access control for VPC resources, we can use Network Access Control Lists (ACLs). 
  NACLs are stateless and operate at the subnet level. We can define inbound and outbound rules in the NACLs to allow or deny traffic based on source and destination IP addresses, ports, and protocols. 
  By carefully configuring NACL rules, we can enforce fine-grained access control for traffic entering and leaving the subnets.

Q: Your organization requires an isolated environment within the VPC for running sensitive workloads. How would you set up this isolated environment?

A: To set up an isolated environment within the VPC, we can create a subnet with no internet gateway attached. 
   This subnet, known as an "isolated subnet," will not have direct internet connectivity. We can place the sensitive workloads in this subnet, ensuring that they are protected from inbound and outbound internet traffic. 
   However, if these workloads require outbound internet access, we can set up a NAT Gateway or NAT instance in a different subnet and configure the isolated subnet's route table to send outbound traffic through the NAT Gateway/instance.

Q: Your application needs to access AWS services, such as S3 securely within your VPC. How would you achieve this?

A: To securely access AWS services within the VPC, we can use VPC endpoints. VPC endpoints allow instances in the VPC to communicate with AWS services privately, without requiring internet gateways or NAT gateways. 
  We can create VPC endpoints for specific AWS services, such as S3 and DynamoDB, and associate them with the VPC. 
  This enables secure and efficient communication between the instances in the VPC and the AWS services.

Q: What is the difference between NACL and Security groups ? Explain with a use case ?

A: For example, I want to design a security architecture, I would use a combination of NACLs and security groups. At the subnet level, I would configure NACLs to enforce inbound and outbound traffic restrictions based on source and destination IP addresses, ports, and protocols. NACLs are stateless and can provide an additional layer of defense by filtering traffic at the subnet boundary.
  At the instance level, I would leverage security groups to control inbound and outbound traffic. Security groups are stateful and operate at the instance level. By carefully defining security group rules, I can allow or deny specific traffic to and from the instances based on the application's security requirements.
  By combining NACLs and security groups, I can achieve granular security controls at both the network and instance level, providing defense-in-depth for the sensitive application.

Q: What is the difference between IAM users, groups, roles and policies ?

A: IAM User: An IAM user is an identity within AWS that represents an individual or application needing access to AWS resources. IAM users have permanent long-term credentials, such as a username and password, or access keys (Access Key ID and Secret Access Key). IAM users can be assigned directly to IAM policies or added to IAM groups for easier management of permissions.
   IAM Role: An IAM role is similar to an IAM user but is not associated with a specific individual. Instead, it is assumed by entities such as IAM users, applications, or services to obtain temporary security credentials. IAM roles are useful when you want to grant permissions to entities that are external to your AWS account or when you want to delegate access to AWS resources across accounts. IAM roles have policies attached to them that define the permissions granted when the role is assumed.
   IAM Group: An IAM group is a collection of IAM users. By organizing IAM users into groups, you can manage permissions collectively. IAM groups make it easier to assign permissions to multiple users simultaneously. Users within an IAM group inherit the permissions assigned to that group. For example, you can create a "Developers" group and assign appropriate policies to grant permissions required for developers across your organization.
   IAM Policy: An IAM policy is a document that defines permissions and access controls in AWS. IAM policies can be attached to IAM users, IAM roles, and IAM groups to define what actions can be performed on which AWS resources. IAM policies use JSON (JavaScript Object Notation) syntax to specify the permissions and can be created and managed independently of the users, roles, or groups. IAM policies consist of statements that include the actions allowed or denied, the resources on which the actions can be performed, and any additional conditions.

Q: You have a private subnet in your VPC that contains a number of instances that should not have direct internet access. However, you still need to be able to securely access these instances for administrative purposes. How would you set up a bastion host to facilitate this access?

A: To securely access the instances in the private subnet, you can set up a bastion host (also known as a jump host or jump box). The bastion host acts as a secure entry point to your private subnet. Here's how you can set up a bastion host:
      Create a new EC2 instance in a public subnet, which will serve as the bastion host. Ensure that this instance has a public IP address or is associated with an Elastic IP address for persistent access.
      Configure the security group for the bastion host to allow inbound SSH (or RDP for Windows) traffic from your IP address or a restricted range of trusted IP addresses. This limits access to the bastion host to authorized administrators only.
      Place the instances in the private subnet and configure their security groups to allow inbound SSH (or RDP) traffic from the bastion host security group.
      SSH (or RDP) into the bastion host using your private key or password. From the bastion host, you can then SSH (or RDP) into the instances in the private subnet using their private IP addresses.


S3 BUCKET:
S3 is used to store the data of any type like files, folders, videos, images, CSV files etc.
	1.	The upload file size should not be exceed 5TB.
	2.	S3 is also supports versioning that means it will keep the previous version of the file if it’s been modified.
	3.	S3 is used to host the static web sites.
	4.	S3 buckets are globally accessible using HTTP protocol.
	5.	S3 supports various storage classes based on your requirements you can choose it.
	6.	The reliability of S3 is 99.11 9’s

The five major advantages of S3 are:
	1.	Availability and durability that means it will not goes down. 
	2.	Scalability that means you can upload as many files you want to the s3 bucket.
	3.	Security that means you strict the bucket who can access etc.
	4.	Cost effective that means based on your requirements you can choose the storage account so that you will not charge more.
	5.	Performance that means we can easily access this bucket anywhere


Cloud Watch:
Cloud watch is a gatekeeper or watchmen to the aws cloud account and which help in understanding and implementing the monitoring, alerting, reporting and logging. With the help of this features, we can keep track of activities that are happening in aws account.

Monitoring - it is used to see whether how much the resource utilised for example ec2 instance how much cpu it is consumed.

Alerting: it is used to give notification to the user.
In the above example, if the ec2 instance reaches 60 then you want to get notified then you need to do using alerting.

Logging - it will provide the insight to you like when you logged into the instance and etc. This logs are present in the console. 

Custom metrics: if you to get track of the memory of the ec2 instance, it will not provide. If you want to track of this custom things then you need to use custom metrics to send data to the cloud watch.

Lambda:
AWS Lambda is a compute, server less and event driven architecture.

Let’s compare with ec2 instance, ec2 is also compute. You can define the details like size ram etc it will automatically creates and deletes when the job is done. Whereas with the ec2 instance, we have to manual stop the instance.

Most common task using lambda is to remove the unused resources in AWS like removing the snapshots, volumes etc.

Cloud Front:
Cloud Front is used for Content Delivery Network(CDN) that means if the application is deployed in some other region, if you try to access the application you will face latency. To reduce the latency, you have use CDN that will cache the content to your nearest locations. So that you will not face any latency during accessing the application.

Most common use-case is hosting the static website in s3 and accessing through the cloud front.

ECR - Elastic Container Registry:
ECR is a container registry which is used to store the container images in it.

Difference between ECR And DOCKER HUB:
Docker hub is public registry. If you create any repository in it, by default it is in public and only one private repository you can create it for free. For storing non sensitive images which is best option.
ECR is AWS container registry. If you create any repository in it, by default it will in private repository. Which is safe and secure to store the organisation images of the application. If you have an AWS account, you can create the ECR for free.

Secrets Management and Systems Management:
Systems Management:
It is used to store the insensitive information like username, registry url etc.

Secrets Management:
It is used to store the sensitive information like passwords and it will provide you the functionality like rotation that means for every 30 days or some period of time, it will automatically ask you to change the password for the security purposes.

In realtime, it is very good practice to use both pf them together for cost optimisation.

Hashi Corp Vault is also secrets management which is not specific to one cloud provider.